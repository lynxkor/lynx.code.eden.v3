<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lce.provider</name>
    </assembly>
    <members>
        <member name="T:lce.provider.Attributes.ServiceAutowiredAttribute">
            <summary>
            服务自动装载
            </summary>
        </member>
        <member name="T:lce.provider.Attributes.ServiceAutowiredProvider">
            <summary>
            服务自动装载
            </summary>
        </member>
        <member name="M:lce.provider.Attributes.ServiceAutowiredProvider.PropertyActivate(System.Object,System.IServiceProvider)">
            <summary>
            服务自动装载
            <para>变量需要有 [ServiceAutowired] 标签</para>
            <para>变量需要以“_”开头命名</para>
            </summary>
            <param name="service"> </param>
            <param name="provider"></param>
        </member>
        <member name="T:lce.provider.Attributes.ServiceProviderAttribute">
            <summary>
            用于标记服务，便于注入注册
            </summary>
        </member>
        <member name="M:lce.provider.Attributes.ServiceProviderAttribute.#ctor(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            构造函数
            </summary>
            <param name="type">    服务类型</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="P:lce.provider.Attributes.ServiceProviderAttribute.Lifetime">
            <summary>
            生命周期，默认为Transient
            </summary>
        </member>
        <member name="P:lce.provider.Attributes.ServiceProviderAttribute.Type">
            <summary>
            服务类型，用于映射
            </summary>
        </member>
        <member name="T:lce.provider.Validation.ValidElementsAttribute">
            <summary>
            action：ValidElementsAttribute
            </summary>
        </member>
        <member name="M:lce.provider.Validation.ValidElementsAttribute.#ctor(System.Int32)">
            <summary>
            序列最小数量
            </summary>
            <param name="minElements"></param>
        </member>
        <member name="M:lce.provider.Validation.ValidElementsAttribute.IsValid(System.Object)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.ChineseSpellExt">
            <summary>
            action：ChineseSpellExt
            </summary>
        </member>
        <member name="M:lce.provider.ChineseSpellExt.ToChsSpell(System.String)">
            <summary>
            获取汉字首字母（可包含多个汉字）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.ConfigExt">
            <summary>
            action：ConfigExt
            </summary>
        </member>
        <member name="M:lce.provider.ConfigExt.Get(System.String)">
            <summary>
            获取配置信息
            </summary>
            <param name="key">配置项</param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.ConfigExt.Set(System.String,System.String)">
            <summary>
            设置配置信息
            </summary>
            <param name="key">  配置项</param>
            <param name="value">值</param>
        </member>
        <member name="T:lce.provider.CoordinateExt">
            <summary>
            经纬度计算器
            </summary>
        </member>
        <member name="M:lce.provider.CoordinateExt.MilesAround(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double)">
            <summary>
            方圆几公里计算
            </summary>
            <param name="lng">   经度</param>
            <param name="lat">   纬度</param>
            <param name="minLng"></param>
            <param name="maxLng"></param>
            <param name="maxLat"></param>
            <param name="minLat"></param>
            <param name="dis">   距离，默认0.5km</param>
        </member>
        <member name="T:lce.provider.Cryptology">
            <summary>
            密码/编码/验证码 生成器
            </summary>
        </member>
        <member name="M:lce.provider.Cryptology.Captcha(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            生成随机字符串
            </summary>
            <returns>The random.</returns>
            <param name="lenght">  Lenght.</param>
            <param name="useNum">  If set to <c>true</c> use number.</param>
            <param name="useLow">  If set to <c>true</c> use low.</param>
            <param name="useUpp">  If set to <c>true</c> use upp.</param>
            <param name="useSpe">  If set to <c>true</c> use special char.</param>
            <param name="isLeast1">If set to <c>true</c> least one char upset.</param>
        </member>
        <member name="M:lce.provider.Cryptology.Code">
            <summary>
            GUID 2 UUID CODE
            </summary>
            <returns></returns>
        </member>
        <member name="M:lce.provider.Cryptology.GenerateGuid">
            <summary>
            根据时间产生有序的GUID编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:lce.provider.Cryptology.ToMd5(System.String)">
            <summary>
            To the md5.
            </summary>
            <returns>The md5.</returns>
            <param name="input">Input.</param>
        </member>
        <member name="M:lce.provider.Cryptology.Version(System.String,System.Boolean)">
            <summary>
            以日期生成十六进制版本编码
            </summary>
            <param name="prefix"> </param>
            <param name="useTime"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.DateTimeExt">
            <summary>
            Date time ext.
            </summary>
        </member>
        <member name="M:lce.provider.DateTimeExt.Format(System.DateTime,System.String)">
            <summary>
            Format datetime,default yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="input"> </param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.FormatShort(System.DateTime)">
            <summary>
            Format yyyy-MM-dd
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.MonthFirstDay(System.DateTime)">
            <summary>
            取得某月的第一天
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.MonthLastDay(System.DateTime)">
            <summary>
            取得某月的最后一天
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.Quarter(System.DateTime)">
            <summary>
            季度
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.QuarterFirstDay(System.DateTime)">
            <summary>
            季度第一天
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.QuarterLastDay(System.DateTime)">
            <summary>
            季度最后一天
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.SwitchType4Date(System.DateTime,lce.provider.Enums.DateType,System.DateTime@,System.DateTime@)">
            <summary>
            根据日期和类型返回对应的开始时间和结束时间
            </summary>
            <param name="type">     类型：日、周、月、季、年</param>
            <param name="date">     日期</param>
            <param name="startDate">开始时间 yyyy-MM-dd 00:00:00</param>
            <param name="endDate">  结束时间 yyyy-MM-dd 23:59:59</param>
        </member>
        <member name="M:lce.provider.DateTimeExt.ToCode(System.DateTime,System.String)">
            <summary>
            Format datetime 4 code
            </summary>
            <param name="input"> </param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.ToDateTime(System.Object)">
            <summary>
            string 2 datetime
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.ToLocal(System.Object)">
            <summary>
            string 2 local time
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.ToUTC(System.Object)">
            <summary>
            string 2 utc
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.WeekFirstDay(System.DateTime)">
            <summary>
            取得本周第一天（周日为第一天）
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.WeekLastDay(System.DateTime)">
            <summary>
            得到本周最后一天（周六为最后一天）
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.WeekLastDay(System.Int32,System.Int32)">
            <summary>
            根据年度周及年到周最后一天
            </summary>
            <param name="week"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.WeekOfMonth(System.DateTime)">
            <summary>
            取日期在某月的第几周
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.WeekOfYear(System.DateTime)">
            <summary>
            取日期在年中的第几周
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.YearFirstDay(System.DateTime)">
            <summary>
            取得某年的第一天
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.DateTimeExt.YearLastDay(System.DateTime)">
            <summary>
            取得某年的最后一天
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.DistinctExt">
            <summary>
            DistinctExt
            </summary>
        </member>
        <member name="M:lce.provider.DistinctExt.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Distinct
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="source">     </param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.CommonEqualityComparer`2">
            <summary>
            CommonEqualityComparer
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:lce.provider.CommonEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            </summary>
            <param name="keySelector"></param>
        </member>
        <member name="M:lce.provider.CommonEqualityComparer`2.Equals(`0,`0)">
            <summary>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.CommonEqualityComparer`2.GetHashCode(`0)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.EmailExt">
            <summary>
            EmailExt
            </summary>
        </member>
        <member name="M:lce.provider.EmailExt.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            发送邮件
            </summary>
            <param name="content"> </param>
            <param name="subject"> </param>
            <param name="mailto">  </param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="mailfrom"></param>
            <param name="smtp">    </param>
            <param name="port">    </param>
        </member>
        <member name="T:lce.provider.EntityExt">
            <summary>
            Entity Ext
            </summary>
        </member>
        <member name="M:lce.provider.EntityExt.Compare``1(``0,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compare modified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"> </param>
            <param name="target"> </param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.EntityExt.Mapping``2(``0)">
            <summary>
            Mapping T to R.
            </summary>
            <typeparam name="T">source type</typeparam>
            <typeparam name="R">target type</typeparam>
            <param name="source">source</param>
            <returns>target</returns>
        </member>
        <member name="M:lce.provider.EntityExt.Mapping``2(``0,``1)">
            <summary>
            Mappging T to R.
            </summary>
            <typeparam name="T">source type</typeparam>
            <typeparam name="R">target type</typeparam>
            <param name="source"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.EntityExt.Mapping``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Mapping List t to List R.
            </summary>
            <typeparam name="T">source type</typeparam>
            <typeparam name="R">target type</typeparam>
            <param name="source">source list</param>
            <returns>target list</returns>
        </member>
        <member name="T:lce.provider.EnumExt">
            <summary>
            枚举扩展类
            </summary>
        </member>
        <member name="M:lce.provider.EnumExt.Description(System.Enum)">
            <summary>
            获取枚举项描述信息
            </summary>
            <param name="eValue">枚举项</param>
            <returns>枚举项描述信息</returns>
        </member>
        <member name="M:lce.provider.EnumExt.List``1">
            <summary>
            获取枚举类型的数据字典
            </summary>
            <returns></returns>
        </member>
        <member name="T:lce.provider.Enums.DateType">
            <summary>
            时间维度
            </summary>
        </member>
        <member name="F:lce.provider.Enums.DateType.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:lce.provider.Enums.DateType.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:lce.provider.Enums.DateType.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:lce.provider.Enums.DateType.Week">
            <summary>
            周
            </summary>
        </member>
        <member name="F:lce.provider.Enums.DateType.Quarter">
            <summary>
            季
            </summary>
        </member>
        <member name="F:lce.provider.Enums.DateType.Region">
            <summary>
            区间
            </summary>
        </member>
        <member name="T:lce.provider.Enums.ResponseCode">
            <summary>
            响应代码/状态信息
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.SUCCESS">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.NOTHING_FOUND">
            <summary>
            没有找到数据
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.BAD_REQUEST">
            <summary>
            请求出错
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.UN_AUTHORIZED">
            <summary>
            身份验证失败/无权访问
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.REQUEST_TIMEOUT">
            <summary>
            请求响应超时
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.REQUEST_ERRORCODE">
            <summary>
            不允许删除配件或项目
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.INVALID_ARGUMENTS">
            <summary>
            参数非法
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.INVALID_FORMAT">
            <summary>
            格式非法
            </summary>
        </member>
        <member name="F:lce.provider.Enums.ResponseCode.SERVER_ERROR">
            <summary>
            服务一般性错误
            </summary>
        </member>
        <member name="T:lce.provider.FileExt">
            <summary>
            文件扩展类
            </summary>
        </member>
        <member name="M:lce.provider.FileExt.GetMimeType(System.String)">
            <summary>
            Get the type of the MIME.
            </summary>
            <returns>The MIME type.</returns>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:lce.provider.FileExt.GetSize(System.Int64)">
            <summary>
            Get the file size.
            </summary>
            <returns>The size.</returns>
            <param name="contentLength">Content length.</param>
        </member>
        <member name="T:lce.provider.HttpClientExt">
            <summary>
            HttpClientExt
            </summary>
        </member>
        <member name="M:lce.provider.HttpClientExt.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String)">
            <summary>
            GET
            </summary>
            <param name="url">        </param>
            <param name="headers">    </param>
            <param name="token">      </param>
            <param name="scheme">     </param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.HttpClientExt.Post``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            POST
            </summary>
            <param name="url">        </param>
            <param name="param">      </param>
            <param name="headers">    </param>
            <param name="contentType"></param>
            <param name="charSet">    </param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.HttpClientExt.Post``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            POST
            </summary>
            <param name="url">        </param>
            <param name="body">       </param>
            <param name="headers">    </param>
            <param name="token">      </param>
            <param name="scheme">     </param>
            <param name="contentType"></param>
            <param name="charSet">    </param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.HttpClientExt.PostAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">        </param>
            <param name="param">      </param>
            <param name="headers">    </param>
            <param name="contentType"></param>
            <param name="charSet">    </param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.HttpClientExt.PostAsync``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">        </param>
            <param name="body">       </param>
            <param name="headers">    </param>
            <param name="token">      </param>
            <param name="scheme">     </param>
            <param name="contentType"></param>
            <param name="charSet">    </param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.ImageExt">
            <summary>
            图片扩展类
            </summary>
        </member>
        <member name="M:lce.provider.ImageExt.Captcha(System.String)">
            <summary>
            生成Code对应的验证码图片
            </summary>
            <returns>The captcha.</returns>
            <param name="code">Code.</param>
        </member>
        <member name="M:lce.provider.ImageExt.Thumbnail(System.Drawing.Image,System.String,System.Int32,System.Boolean)">
            <summary>
            Thumbnail the specified source, target, size and side.
            </summary>
            <returns>The thumbnail.</returns>
            <param name="source">Source.</param>
            <param name="target">Target.存储文件名，后缀.png，并且只能有一个(.)这应该是一个基类里的bug</param>
            <param name="size">  Size.</param>
            <param name="side">  If set to <c>true</c> side.</param>
        </member>
        <member name="M:lce.provider.ImageExt.Thumbnail(System.Drawing.Image,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Thumbnail the specified source, target, width, height and quality.
            </summary>
            <returns>The thumbnail.</returns>
            <param name="source"> Source.</param>
            <param name="target"> Target.存储文件名，后缀.png，并且只能有一个(.)这应该是一个基类里的bug</param>
            <param name="width">  Width.</param>
            <param name="height"> Height.</param>
            <param name="isFixed">是否比例换算后绘制到固定width,height画布中,true：是；false；画布也等比例</param>
        </member>
        <member name="M:lce.provider.ImageExt.Thumbnail(System.Drawing.Image,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Thumbnail the specified source, target, sWidth, sHeight, tWidth, tHeight and isFixed.
            </summary>
            <returns>The thumbnail.</returns>
            <param name="source"> Source.</param>
            <param name="target"> Target.</param>
            <param name="sWidth"> S width.</param>
            <param name="sHeight">S height.</param>
            <param name="tWidth"> T width.</param>
            <param name="tHeight">T height.</param>
            <param name="isFixed">If set to <c>true</c> is fixed.</param>
        </member>
        <member name="T:lce.provider.JsonExt">
            <summary>
            JsonExt
            </summary>
        </member>
        <member name="M:lce.provider.JsonExt.ToJson(System.Object,System.Boolean,System.Boolean)">
            <summary>
            object to json string.
            </summary>
            <returns>The json.</returns>
            <param name="obj">        Object.</param>
            <param name="indented">   If set to <c>true</c> indented.</param>
            <param name="includeNull">If set to <c>true</c> include null.</param>
        </member>
        <member name="M:lce.provider.JsonExt.ToModel``1(System.String)">
            <summary>
            Json string to model.
            </summary>
            <returns>The model.</returns>
            <param name="input">Input.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:lce.provider.WriteErr">
            <summary>
            把错误写入日志(委托)
            </summary>
            <param name="message">日志描述 ex.Message会自动加上</param>
            <param name="ex">     异常信息</param>
        </member>
        <member name="T:lce.provider.WriteInfo">
            <summary>
            把信息写入日志(委托)
            </summary>
            <param name="message">日志描述</param>
        </member>
        <member name="T:lce.provider.WriteLog">
            <summary>
            写入日志(委托)
            </summary>
            <param name="logType">日志级别</param>
            <param name="message">日志描述</param>
        </member>
        <member name="T:lce.provider.LogType">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:lce.provider.LogType.INFO">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:lce.provider.LogType.DEBUG">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:lce.provider.LogType.ERROR">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:lce.provider.LogExt">
             <summary>
             概述：日志文件处理器
            <para>文件：Toolkit.Log.Log</para>
            <para>作者：Lynx.kor</para>
            <para>创建时间：2016/5/25 10:10:58</para>
            <para>描述：appSettings add namevalue</para>
            <code><add key = "LogPath" value="C:\Log\" /></code>
            <code><add key = "AppName" value="Toolkit"/></code>
            <para>> add description for Log 修改历史：</para>
             </summary>
        </member>
        <member name="F:lce.provider.LogExt.e">
            <summary>
            把错误写入日志(委托)
            </summary>
        </member>
        <member name="F:lce.provider.LogExt.i">
            <summary>
            把信息写入日志(委托)
            </summary>
        </member>
        <member name="F:lce.provider.LogExt.write">
            <summary>
            写入日志(委托)
            </summary>
        </member>
        <member name="M:lce.provider.LogExt.#cctor">
            <summary>
            日志器构造
            </summary>
        </member>
        <member name="P:lce.provider.LogExt.LogSize">
            <summary>
            每个日志文件大小(M)
            </summary>
        </member>
        <member name="P:lce.provider.LogExt.LogDir">
            <summary>
            日志目录
            </summary>
        </member>
        <member name="P:lce.provider.LogExt.SoftName">
            <summary>
            应用程序名
            </summary>
        </member>
        <member name="M:lce.provider.LogExt.GetRing">
            <summary>
            时间戳/年轮
            </summary>
            <returns>e.g.13C10T15:55:55:444</returns>
        </member>
        <member name="M:lce.provider.LogExt.writeLine(lce.provider.LogType,System.String,System.Exception,System.String)">
            <summary>
            写入日志
            </summary>
            <param name="logType">日志级别</param>
            <param name="message">日志描述</param>
            <param name="ex">     异常信息</param>
            <param name="logPath"></param>
        </member>
        <member name="T:lce.provider.PredicateExt">
            <summary>
            lambda包装器
            </summary>
        </member>
        <member name="M:lce.provider.PredicateExt.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Left And Right
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"> </param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.PredicateExt.False``1">
            <summary>
            False
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:lce.provider.PredicateExt.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Left Or Right
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"> </param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.PredicateExt.True``1">
            <summary>
            True
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:lce.provider.Requests.BaseQuery">
            <summary>
            查询基类
            </summary>
        </member>
        <member name="P:lce.provider.Requests.BaseQuery.Keyword">
            <summary>
            关键字
            </summary>
        </member>
        <member name="T:lce.provider.Requests.PageQuery">
            <summary>
            分頁查询
            </summary>
        </member>
        <member name="P:lce.provider.Requests.PageQuery.Orders">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:lce.provider.Requests.PageQuery.Page">
            <summary>
            頁码
            </summary>
        </member>
        <member name="P:lce.provider.Requests.PageQuery.Size">
            <summary>
            頁阀
            </summary>
        </member>
        <member name="T:lce.provider.Requests.ReportQuery">
            <summary>
            通用报表查询参数
            <para>日期时间为空时默认取当前时间;</para>
            <para>时间维度为1010~1050时取Date[0]计算对应日期所在的时间维度第一天到最后一天;</para>
            <para>时间维度为1060时根据Date中两个日期时间值指定区间用作运算</para>
            </summary>
        </member>
        <member name="P:lce.provider.Requests.ReportQuery.Date">
            <summary>
            日期时间
            </summary>
        </member>
        <member name="P:lce.provider.Requests.ReportQuery.DateType">
            <summary>
            时间维度 1010:年，1020:月，1030:日，1040:周，1050:季，1060:自定义区间
            <code>DateTimeExt.DateType</code>
            </summary>
        </member>
        <member name="T:lce.provider.Responses.BaseResponse`1">
            <summary>
            请求响应体
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:lce.provider.Responses.BaseResponse`1.#ctor">
            <summary>
            请求响应体
            </summary>
        </member>
        <member name="M:lce.provider.Responses.BaseResponse`1.#ctor(lce.provider.Enums.ResponseCode)">
            <summary>
            请求响应体
            </summary>
            <param name="code">状态码</param>
        </member>
        <member name="M:lce.provider.Responses.BaseResponse`1.#ctor(lce.provider.Enums.ResponseCode,System.String)">
            <summary>
            请求响应体
            </summary>
            <param name="code">状态码</param>
            <param name="msg"> 状态信息</param>
        </member>
        <member name="M:lce.provider.Responses.BaseResponse`1.#ctor(`0)">
            <summary>
            实例化
            </summary>
            <param name="data">数据体</param>
        </member>
        <member name="M:lce.provider.Responses.BaseResponse`1.#ctor(lce.provider.Enums.ResponseCode,`0)">
            <summary>
            实例化
            </summary>
            <param name="code">状态码</param>
            <param name="data">数据体</param>
        </member>
        <member name="M:lce.provider.Responses.BaseResponse`1.#ctor(lce.provider.Enums.ResponseCode,System.String,`0)">
            <summary>
            实例化
            </summary>
            <param name="code">状态码</param>
            <param name="msg"> 状态信息</param>
            <param name="data">数据体</param>
        </member>
        <member name="P:lce.provider.Responses.BaseResponse`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:lce.provider.Responses.BaseResponse`1.Data">
            <summary>
            返回的数据内容
            </summary>
        </member>
        <member name="P:lce.provider.Responses.BaseResponse`1.Msg">
            <summary>
            状态信息
            </summary>
        </member>
        <member name="P:lce.provider.Responses.BaseResponse`1.Success">
            <summary>
            </summary>
        </member>
        <member name="T:lce.provider.Responses.PageResponse`1">
            <summary>
            分頁/列表请求响应体
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:lce.provider.Responses.PageResponse`1.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:lce.provider.Responses.PageResponse`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化
            </summary>
            <param name="page"> 頁码</param>
            <param name="size"> 頁阀</param>
            <param name="total">总数</param>
        </member>
        <member name="M:lce.provider.Responses.PageResponse`1.#ctor(System.Int32,System.Int32,System.Int32,`0)">
            <summary>
            实例化
            </summary>
            <param name="page"> 頁码</param>
            <param name="size"> 頁阀</param>
            <param name="total">总数</param>
            <param name="data"> 数据体</param>
        </member>
        <member name="P:lce.provider.Responses.PageResponse`1.Page">
            <summary>
            頁码
            </summary>
        </member>
        <member name="P:lce.provider.Responses.PageResponse`1.Size">
            <summary>
            頁阀
            </summary>
        </member>
        <member name="P:lce.provider.Responses.PageResponse`1.Total">
            <summary>
            总数
            </summary>
        </member>
        <member name="T:lce.provider.ServicesExt">
            <summary>
            action：ServicesExt
            </summary>
        </member>
        <member name="M:lce.provider.ServicesExt.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            服务注册器
            <para>服务需要有 [ServiceProvider] 标签</para>
            </summary>
            <param name="services">     </param>
            <param name="rootnamespace">服务所在命名空间</param>
        </member>
        <member name="T:lce.provider.SmsExt">
            <summary>
            短信扩展类
            </summary>
        </member>
        <member name="M:lce.provider.SmsExt.Send(System.String,System.Object,System.String,System.String)">
            <summary>
            发送短信 Aliyun.SMS
            </summary>
            <param name="phones">      手机号 ,分割</param>
            <param name="content">     信息内容</param>
            <param name="signName">    签名</param>
            <param name="templateCode">模板ID</param>
        </member>
        <member name="T:lce.provider.StringExt">
            <summary>
            action：StringExt
            </summary>
        </member>
        <member name="M:lce.provider.StringExt.IsNullOrEmpty(System.String)">
            <summary>
            string IsNullOrEmpty
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.Left(System.String,System.Int32)">
            <summary>
            left {length} char of string.
            </summary>
            <param name="input"> </param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.Left(System.String,System.Int32,System.Char)">
            <summary>
            left {length} char of string supplement with {supplemen}.
            </summary>
            <param name="input">     </param>
            <param name="length">    </param>
            <param name="supplement"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.Right(System.Int32,System.Int32)">
            <summary>
            right {length} char of string.
            </summary>
            <param name="input"> </param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.Right(System.Int32,System.Int32,System.Char)">
            <summary>
            right {length} char of string supplement with {supplemen}.
            </summary>
            <param name="input">     </param>
            <param name="length">    </param>
            <param name="supplement"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.Right(System.String,System.Int32)">
            <summary>
            right {length} char of string.
            </summary>
            <param name="input"> </param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.Right(System.String,System.Int32,System.Char)">
            <summary>
            right {length} char of string supplement with {supplemen}.
            </summary>
            <param name="input">     </param>
            <param name="length">    </param>
            <param name="supplement">长度不度时(前)补位字符</param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.ToDecimal(System.Object)">
            <summary>
            to decimal
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.ToDouble(System.Object)">
            <summary>
            to double
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.ToHex(System.String)">
            <summary>
            字符串转换成十六进制
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.ToHex(System.Int32)">
            <summary>
            十进制2十六进制
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.ToInt32(System.String)">
            <summary>
            string to int32.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.StringExt.ToInt32(System.Object)">
            <summary>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.Verifier">
            <summary>
            Verifier
            </summary>
        </member>
        <member name="M:lce.provider.Verifier.IsNumber(System.String)">
            <summary>
            判断对象是否为数值
            </summary>
            <returns><c>true</c>, if number was ised, <c>false</c> otherwise.</returns>
            <param name="Value">Value.</param>
        </member>
        <member name="M:lce.provider.Verifier.VerifyBool(System.Object)">
            <summary>
            校验布尔值
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyByte(System.Object)">
            <summary>
            校验是否为字节格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法字节返回传入值,非法字节返回零</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyDateTime(System.Object)">
            <summary>
            校验是否为日期格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法日期返回传入值,非法日期返回当前日期值</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyDateTime(System.Object,System.String)">
            <summary>
            反回指定格式的日期字符串
            </summary>
            <param name="Value"> </param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyDecimal(System.Object)">
            <summary>
            校验是否为Decimal型格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法Decimal型返回传入值,非法Decimal型返回零</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyDouble(System.Object)">
            <summary>
            校验是否为double型格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法double型返回传入值,非法double型返回零</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyInt(System.Object)">
            <summary>
            校验是否为整型格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法整型返回传入值,非法整型返回零</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyLong(System.Object)">
            <summary>
            校验是否为长整型格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法长整型返回传入值,非法长整型返回零</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyShort(System.Object)">
            <summary>
            校验是否为短整型格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法短整型返回传入值,非法短整型返回零</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifySingle(System.Object)">
            <summary>
            校验是否为single型格式
            </summary>
            <param name="Value">要校验的值</param>
            <returns>合法single型返回传入值,非法single型返回零</returns>
        </member>
        <member name="M:lce.provider.Verifier.VerifyString(System.Object)">
            <summary>
            校验是否为字符串
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:lce.provider.XmlExt">
            <summary>
            action：XmlExt
            </summary>
        </member>
        <member name="M:lce.provider.XmlExt.ToXml``1(``0)">
            <summary>
            Model to the xml.
            </summary>
            <returns>The xml.</returns>
            <param name="model">Model.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:lce.provider.XmlExt.XmlToModel``1(System.String)">
            <summary>
            Xml to model.
            </summary>
            <returns>The model.</returns>
            <param name="xml">Xml.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
    </members>
</doc>
